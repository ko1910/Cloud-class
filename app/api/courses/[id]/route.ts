// File: app/api/courses/[id]/route.ts
import { NextResponse, NextRequest } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { connectDB } from "@/lib/mongodb";
import Course from "@/models/Course";

/**
 * üìò GET: L·∫•y th√¥ng tin chi ti·∫øt 1 kh√≥a h·ªçc theo ID
 */
export async function GET(
  req: NextRequest,
  // === S·ª¨A L·ªñI BUILD (L·∫¶N 2) ===
  context: { params: Promise<{ id: string }> } // Thay ƒë·ªïi 1: Nh·∫≠n 'context'
) {
  // === S·ª¨A L·ªñI BUILD (L·∫¶N 2) ===
  const params = await context.params; // Thay ƒë·ªïi 2: Await ƒë·ªÉ l·∫•y params
  // ==============================

  await connectDB();

  try {
    const course = await Course.findById(params.id); // Gi·ªù params.id ƒë√£ h·ª£p l·ªá

    if (!course) {
      return NextResponse.json({ error: "Not found" }, { status: 404 });
    }

    return NextResponse.json(course);
  } catch (error) {
    console.error("GET /api/courses/[id] error:", error);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

/**
 * üìô PATCH: C·∫≠p nh·∫≠t th√¥ng tin kh√≥a h·ªçc
 */
export async function PATCH(
  req: NextRequest,
  // === S·ª¨A L·ªñI BUILD (L·∫¶N 2) ===
  context: { params: Promise<{ id: string }> } // Thay ƒë·ªïi 1: Nh·∫≠n 'context'
) {
  // === S·ª¨A L·ªñI BUILD (L·∫¶N 2) ===
  const params = await context.params; // Thay ƒë·ªïi 2: Await ƒë·ªÉ l·∫•y params
  // ==============================

  const session = await getServerSession(authOptions);
  if (!session) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  await connectDB();

  try {
    const course = await Course.findById(params.id); // Gi·ªù params.id ƒë√£ h·ª£p l·ªá
    if (!course) {
      return NextResponse.json({ error: "Not found" }, { status: 404 });
    }

    const userId = (session.user as any).id;
    const role = (session.user as any).role;

    if (String(course.instructorId) !== userId && role !== "admin") {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    // L·∫•y c√°c tr∆∞·ªùng c·ª• th·ªÉ t·ª´ body
    const { title, description, published } = await req.json();

    // G√°n th·ªß c√¥ng (an to√†n)
    if (title) {
      course.title = title;
    }
    if (description) {
      course.description = description;
    }
    if (typeof published === "boolean") {
      course.published = published;
    }

    await course.save();

    return NextResponse.json(course);
  } catch (error) {
    console.error("PATCH /api/courses/[id] error:", error);
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}